/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface EscrowFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getEscrow"
      | "getEscrowImplementation"
      | "getEscrowProxyAdmin"
      | "initialize"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "upgradeEscrowFor"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EscrowDeployed"
      | "EscrowUpgraded"
      | "FundReceipt"
      | "Initialized"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getEscrow",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEscrowImplementation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEscrowProxyAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeEscrowFor",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "getEscrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEscrowImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEscrowProxyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeEscrowFor",
    data: BytesLike
  ): Result;
}

export namespace EscrowDeployedEvent {
  export type InputTuple = [owner: AddressLike, escrow: AddressLike];
  export type OutputTuple = [owner: string, escrow: string];
  export interface OutputObject {
    owner: string;
    escrow: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowUpgradedEvent {
  export type InputTuple = [
    oldImplementation: AddressLike,
    newImplementation: AddressLike
  ];
  export type OutputTuple = [
    oldImplementation: string,
    newImplementation: string
  ];
  export interface OutputObject {
    oldImplementation: string;
    newImplementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundReceiptEvent {
  export type InputTuple = [sender: AddressLike, recipient: AddressLike];
  export type OutputTuple = [sender: string, recipient: string];
  export interface OutputObject {
    sender: string;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EscrowFactory extends BaseContract {
  connect(runner?: ContractRunner | null): EscrowFactory;
  waitForDeployment(): Promise<this>;

  interface: EscrowFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getEscrow: TypedContractMethod<
    [_ownerContract: AddressLike],
    [string],
    "view"
  >;

  getEscrowImplementation: TypedContractMethod<
    [_escrow: AddressLike],
    [string],
    "view"
  >;

  getEscrowProxyAdmin: TypedContractMethod<
    [_escrow: AddressLike],
    [string],
    "view"
  >;

  initialize: TypedContractMethod<[], [void], "payable">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeEscrowFor: TypedContractMethod<
    [
      _ownerContract: AddressLike,
      newImplementation: AddressLike,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getEscrow"
  ): TypedContractMethod<[_ownerContract: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getEscrowImplementation"
  ): TypedContractMethod<[_escrow: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getEscrowProxyAdmin"
  ): TypedContractMethod<[_escrow: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeEscrowFor"
  ): TypedContractMethod<
    [
      _ownerContract: AddressLike,
      newImplementation: AddressLike,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "EscrowDeployed"
  ): TypedContractEvent<
    EscrowDeployedEvent.InputTuple,
    EscrowDeployedEvent.OutputTuple,
    EscrowDeployedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowUpgraded"
  ): TypedContractEvent<
    EscrowUpgradedEvent.InputTuple,
    EscrowUpgradedEvent.OutputTuple,
    EscrowUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "FundReceipt"
  ): TypedContractEvent<
    FundReceiptEvent.InputTuple,
    FundReceiptEvent.OutputTuple,
    FundReceiptEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "EscrowDeployed(address,address)": TypedContractEvent<
      EscrowDeployedEvent.InputTuple,
      EscrowDeployedEvent.OutputTuple,
      EscrowDeployedEvent.OutputObject
    >;
    EscrowDeployed: TypedContractEvent<
      EscrowDeployedEvent.InputTuple,
      EscrowDeployedEvent.OutputTuple,
      EscrowDeployedEvent.OutputObject
    >;

    "EscrowUpgraded(address,address)": TypedContractEvent<
      EscrowUpgradedEvent.InputTuple,
      EscrowUpgradedEvent.OutputTuple,
      EscrowUpgradedEvent.OutputObject
    >;
    EscrowUpgraded: TypedContractEvent<
      EscrowUpgradedEvent.InputTuple,
      EscrowUpgradedEvent.OutputTuple,
      EscrowUpgradedEvent.OutputObject
    >;

    "FundReceipt(address,address)": TypedContractEvent<
      FundReceiptEvent.InputTuple,
      FundReceiptEvent.OutputTuple,
      FundReceiptEvent.OutputObject
    >;
    FundReceipt: TypedContractEvent<
      FundReceiptEvent.InputTuple,
      FundReceiptEvent.OutputTuple,
      FundReceiptEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
