/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type UserOperationStruct = {
  sender: AddressLike;
  nonce: BigNumberish;
  initCode: BytesLike;
  callData: BytesLike;
  callGasLimit: BigNumberish;
  verificationGasLimit: BigNumberish;
  preVerificationGas: BigNumberish;
  maxFeePerGas: BigNumberish;
  maxPriorityFeePerGas: BigNumberish;
  paymasterAndData: BytesLike;
  signature: BytesLike;
};

export type UserOperationStructOutput = [
  sender: string,
  nonce: bigint,
  initCode: string,
  callData: string,
  callGasLimit: bigint,
  verificationGasLimit: bigint,
  preVerificationGas: bigint,
  maxFeePerGas: bigint,
  maxPriorityFeePerGas: bigint,
  paymasterAndData: string,
  signature: string
] & {
  sender: string;
  nonce: bigint;
  initCode: string;
  callData: string;
  callGasLimit: bigint;
  verificationGasLimit: bigint;
  preVerificationGas: bigint;
  maxFeePerGas: bigint;
  maxPriorityFeePerGas: bigint;
  paymasterAndData: string;
  signature: string;
};

export interface NewCWalletInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "addDeposit"
      | "blacklistTargets"
      | "collective"
      | "entryPoint"
      | "execute"
      | "executeBatch"
      | "getDeposit"
      | "getNonce"
      | "initialize"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "operator"
      | "proxiableUUID"
      | "supportsInterface"
      | "tokensReceived"
      | "upgradeToAndCall"
      | "validateUserOp"
      | "whitelistTargets"
      | "whitelistedTargets"
      | "withdrawDepositTo"
      | "withdrawNative"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CollectiveWalletInitialized"
      | "FundsWithdrawn"
      | "Initialized"
      | "NewSigner"
      | "OperatorRenounced"
      | "RewardReceived"
      | "TargetsBlacklisted"
      | "TargetsWhitelisted"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistTargets",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collective",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "entryPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBatch",
    values: [AddressLike[], BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getNonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "operator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensReceived",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateUserOp",
    values: [UserOperationStruct, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistTargets",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedTargets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDepositTo",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNative",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addDeposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blacklistTargets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collective", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "entryPoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateUserOp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistTargets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedTargets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDepositTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNative",
    data: BytesLike
  ): Result;
}

export namespace CollectiveWalletInitializedEvent {
  export type InputTuple = [entryPoint: AddressLike, collective: AddressLike];
  export type OutputTuple = [entryPoint: string, collective: string];
  export interface OutputObject {
    entryPoint: string;
    collective: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsWithdrawnEvent {
  export type InputTuple = [recipient: AddressLike, amount: BigNumberish];
  export type OutputTuple = [recipient: string, amount: bigint];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewSignerEvent {
  export type InputTuple = [signer: AddressLike];
  export type OutputTuple = [signer: string];
  export interface OutputObject {
    signer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorRenouncedEvent {
  export type InputTuple = [operator: AddressLike];
  export type OutputTuple = [operator: string];
  export interface OutputObject {
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardReceivedEvent {
  export type InputTuple = [sender: AddressLike, amount: BigNumberish];
  export type OutputTuple = [sender: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TargetsBlacklistedEvent {
  export type InputTuple = [target: AddressLike[]];
  export type OutputTuple = [target: string[]];
  export interface OutputObject {
    target: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TargetsWhitelistedEvent {
  export type InputTuple = [target: AddressLike[]];
  export type OutputTuple = [target: string[]];
  export interface OutputObject {
    target: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NewCWallet extends BaseContract {
  connect(runner?: ContractRunner | null): NewCWallet;
  waitForDeployment(): Promise<this>;

  interface: NewCWalletInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  addDeposit: TypedContractMethod<[], [void], "payable">;

  blacklistTargets: TypedContractMethod<
    [theTargets: AddressLike[]],
    [void],
    "nonpayable"
  >;

  collective: TypedContractMethod<[], [string], "view">;

  entryPoint: TypedContractMethod<[], [string], "view">;

  execute: TypedContractMethod<
    [dest: AddressLike, value: BigNumberish, func: BytesLike],
    [void],
    "nonpayable"
  >;

  executeBatch: TypedContractMethod<
    [dest: AddressLike[], value: BigNumberish[], func: BytesLike[]],
    [void],
    "nonpayable"
  >;

  getDeposit: TypedContractMethod<[], [bigint], "view">;

  getNonce: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [theCollective: AddressLike, theOperator: AddressLike],
    [void],
    "nonpayable"
  >;

  onERC1155BatchReceived: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "view"
  >;

  onERC1155Received: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "view"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;

  operator: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tokensReceived: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: AddressLike,
      arg3: BigNumberish,
      arg4: BytesLike,
      arg5: BytesLike
    ],
    [void],
    "view"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  validateUserOp: TypedContractMethod<
    [
      userOp: UserOperationStruct,
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  whitelistTargets: TypedContractMethod<
    [theTargets: AddressLike[]],
    [void],
    "nonpayable"
  >;

  whitelistedTargets: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  withdrawDepositTo: TypedContractMethod<
    [withdrawAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawNative: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addDeposit"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "blacklistTargets"
  ): TypedContractMethod<[theTargets: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "collective"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "entryPoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [dest: AddressLike, value: BigNumberish, func: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeBatch"
  ): TypedContractMethod<
    [dest: AddressLike[], value: BigNumberish[], func: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getDeposit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNonce"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [theCollective: AddressLike, theOperator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC1155BatchReceived"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC1155Received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "operator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokensReceived"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: AddressLike,
      arg3: BigNumberish,
      arg4: BytesLike,
      arg5: BytesLike
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "validateUserOp"
  ): TypedContractMethod<
    [
      userOp: UserOperationStruct,
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "whitelistTargets"
  ): TypedContractMethod<[theTargets: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "whitelistedTargets"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "withdrawDepositTo"
  ): TypedContractMethod<
    [withdrawAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawNative"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CollectiveWalletInitialized"
  ): TypedContractEvent<
    CollectiveWalletInitializedEvent.InputTuple,
    CollectiveWalletInitializedEvent.OutputTuple,
    CollectiveWalletInitializedEvent.OutputObject
  >;
  getEvent(
    key: "FundsWithdrawn"
  ): TypedContractEvent<
    FundsWithdrawnEvent.InputTuple,
    FundsWithdrawnEvent.OutputTuple,
    FundsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "NewSigner"
  ): TypedContractEvent<
    NewSignerEvent.InputTuple,
    NewSignerEvent.OutputTuple,
    NewSignerEvent.OutputObject
  >;
  getEvent(
    key: "OperatorRenounced"
  ): TypedContractEvent<
    OperatorRenouncedEvent.InputTuple,
    OperatorRenouncedEvent.OutputTuple,
    OperatorRenouncedEvent.OutputObject
  >;
  getEvent(
    key: "RewardReceived"
  ): TypedContractEvent<
    RewardReceivedEvent.InputTuple,
    RewardReceivedEvent.OutputTuple,
    RewardReceivedEvent.OutputObject
  >;
  getEvent(
    key: "TargetsBlacklisted"
  ): TypedContractEvent<
    TargetsBlacklistedEvent.InputTuple,
    TargetsBlacklistedEvent.OutputTuple,
    TargetsBlacklistedEvent.OutputObject
  >;
  getEvent(
    key: "TargetsWhitelisted"
  ): TypedContractEvent<
    TargetsWhitelistedEvent.InputTuple,
    TargetsWhitelistedEvent.OutputTuple,
    TargetsWhitelistedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "CollectiveWalletInitialized(address,address)": TypedContractEvent<
      CollectiveWalletInitializedEvent.InputTuple,
      CollectiveWalletInitializedEvent.OutputTuple,
      CollectiveWalletInitializedEvent.OutputObject
    >;
    CollectiveWalletInitialized: TypedContractEvent<
      CollectiveWalletInitializedEvent.InputTuple,
      CollectiveWalletInitializedEvent.OutputTuple,
      CollectiveWalletInitializedEvent.OutputObject
    >;

    "FundsWithdrawn(address,uint256)": TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;
    FundsWithdrawn: TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "NewSigner(address)": TypedContractEvent<
      NewSignerEvent.InputTuple,
      NewSignerEvent.OutputTuple,
      NewSignerEvent.OutputObject
    >;
    NewSigner: TypedContractEvent<
      NewSignerEvent.InputTuple,
      NewSignerEvent.OutputTuple,
      NewSignerEvent.OutputObject
    >;

    "OperatorRenounced(address)": TypedContractEvent<
      OperatorRenouncedEvent.InputTuple,
      OperatorRenouncedEvent.OutputTuple,
      OperatorRenouncedEvent.OutputObject
    >;
    OperatorRenounced: TypedContractEvent<
      OperatorRenouncedEvent.InputTuple,
      OperatorRenouncedEvent.OutputTuple,
      OperatorRenouncedEvent.OutputObject
    >;

    "RewardReceived(address,uint256)": TypedContractEvent<
      RewardReceivedEvent.InputTuple,
      RewardReceivedEvent.OutputTuple,
      RewardReceivedEvent.OutputObject
    >;
    RewardReceived: TypedContractEvent<
      RewardReceivedEvent.InputTuple,
      RewardReceivedEvent.OutputTuple,
      RewardReceivedEvent.OutputObject
    >;

    "TargetsBlacklisted(address[])": TypedContractEvent<
      TargetsBlacklistedEvent.InputTuple,
      TargetsBlacklistedEvent.OutputTuple,
      TargetsBlacklistedEvent.OutputObject
    >;
    TargetsBlacklisted: TypedContractEvent<
      TargetsBlacklistedEvent.InputTuple,
      TargetsBlacklistedEvent.OutputTuple,
      TargetsBlacklistedEvent.OutputObject
    >;

    "TargetsWhitelisted(address[])": TypedContractEvent<
      TargetsWhitelistedEvent.InputTuple,
      TargetsWhitelistedEvent.OutputTuple,
      TargetsWhitelistedEvent.OutputObject
    >;
    TargetsWhitelisted: TypedContractEvent<
      TargetsWhitelistedEvent.InputTuple,
      TargetsWhitelistedEvent.OutputTuple,
      TargetsWhitelistedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
