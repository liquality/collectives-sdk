/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ICollectiveInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "blacklistTargets"
      | "createPools"
      | "joinCollective"
      | "leaveCollective"
      | "receivePoolReward"
      | "recordPoolMint"
      | "removeMember"
      | "renounceOperator"
      | "whitelistTargets"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CWalletSet"
      | "CollectiveInitialized"
      | "MemberRemoved"
      | "NewMember"
      | "OperatorRenounced"
      | "PoolAdded"
      | "RewardForwarded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "blacklistTargets",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createPools",
    values: [AddressLike[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "joinCollective",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "leaveCollective",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receivePoolReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recordPoolMint",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMember",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistTargets",
    values: [AddressLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "blacklistTargets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinCollective",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leaveCollective",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receivePoolReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordPoolMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistTargets",
    data: BytesLike
  ): Result;
}

export namespace CWalletSetEvent {
  export type InputTuple = [cWallet: AddressLike];
  export type OutputTuple = [cWallet: string];
  export interface OutputObject {
    cWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectiveInitializedEvent {
  export type InputTuple = [initiator: AddressLike, operator: AddressLike];
  export type OutputTuple = [initiator: string, operator: string];
  export interface OutputObject {
    initiator: string;
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemberRemovedEvent {
  export type InputTuple = [member: AddressLike];
  export type OutputTuple = [member: string];
  export interface OutputObject {
    member: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewMemberEvent {
  export type InputTuple = [member: AddressLike];
  export type OutputTuple = [member: string];
  export interface OutputObject {
    member: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorRenouncedEvent {
  export type InputTuple = [operator: AddressLike];
  export type OutputTuple = [operator: string];
  export interface OutputObject {
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolAddedEvent {
  export type InputTuple = [
    pool: AddressLike,
    tokenContract: AddressLike,
    honeyPot: AddressLike,
    initiator: AddressLike
  ];
  export type OutputTuple = [
    pool: string,
    tokenContract: string,
    honeyPot: string,
    initiator: string
  ];
  export interface OutputObject {
    pool: string;
    tokenContract: string;
    honeyPot: string;
    initiator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardForwardedEvent {
  export type InputTuple = [
    pool: AddressLike,
    honeyPot: AddressLike,
    amount: BigNumberish,
    tokenContract: AddressLike
  ];
  export type OutputTuple = [
    pool: string,
    honeyPot: string,
    amount: bigint,
    tokenContract: string
  ];
  export interface OutputObject {
    pool: string;
    honeyPot: string;
    amount: bigint;
    tokenContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICollective extends BaseContract {
  connect(runner?: ContractRunner | null): ICollective;
  waitForDeployment(): Promise<this>;

  interface: ICollectiveInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  blacklistTargets: TypedContractMethod<
    [_targets: AddressLike[]],
    [void],
    "nonpayable"
  >;

  createPools: TypedContractMethod<
    [_tokenContracts: AddressLike[], _honeyPots: AddressLike[]],
    [void],
    "nonpayable"
  >;

  joinCollective: TypedContractMethod<
    [_inviteSig: BytesLike, _inviteId: BytesLike],
    [void],
    "nonpayable"
  >;

  leaveCollective: TypedContractMethod<[], [void], "nonpayable">;

  receivePoolReward: TypedContractMethod<
    [_honeyPot: AddressLike],
    [boolean],
    "payable"
  >;

  recordPoolMint: TypedContractMethod<
    [
      _pool: AddressLike,
      _participant: AddressLike,
      _tokenID: BigNumberish,
      _quantity: BigNumberish,
      _amountPaid: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  removeMember: TypedContractMethod<
    [_member: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOperator: TypedContractMethod<[], [void], "nonpayable">;

  whitelistTargets: TypedContractMethod<
    [_targets: AddressLike[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "blacklistTargets"
  ): TypedContractMethod<[_targets: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createPools"
  ): TypedContractMethod<
    [_tokenContracts: AddressLike[], _honeyPots: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "joinCollective"
  ): TypedContractMethod<
    [_inviteSig: BytesLike, _inviteId: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "leaveCollective"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "receivePoolReward"
  ): TypedContractMethod<[_honeyPot: AddressLike], [boolean], "payable">;
  getFunction(
    nameOrSignature: "recordPoolMint"
  ): TypedContractMethod<
    [
      _pool: AddressLike,
      _participant: AddressLike,
      _tokenID: BigNumberish,
      _quantity: BigNumberish,
      _amountPaid: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeMember"
  ): TypedContractMethod<[_member: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOperator"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "whitelistTargets"
  ): TypedContractMethod<[_targets: AddressLike[]], [void], "nonpayable">;

  getEvent(
    key: "CWalletSet"
  ): TypedContractEvent<
    CWalletSetEvent.InputTuple,
    CWalletSetEvent.OutputTuple,
    CWalletSetEvent.OutputObject
  >;
  getEvent(
    key: "CollectiveInitialized"
  ): TypedContractEvent<
    CollectiveInitializedEvent.InputTuple,
    CollectiveInitializedEvent.OutputTuple,
    CollectiveInitializedEvent.OutputObject
  >;
  getEvent(
    key: "MemberRemoved"
  ): TypedContractEvent<
    MemberRemovedEvent.InputTuple,
    MemberRemovedEvent.OutputTuple,
    MemberRemovedEvent.OutputObject
  >;
  getEvent(
    key: "NewMember"
  ): TypedContractEvent<
    NewMemberEvent.InputTuple,
    NewMemberEvent.OutputTuple,
    NewMemberEvent.OutputObject
  >;
  getEvent(
    key: "OperatorRenounced"
  ): TypedContractEvent<
    OperatorRenouncedEvent.InputTuple,
    OperatorRenouncedEvent.OutputTuple,
    OperatorRenouncedEvent.OutputObject
  >;
  getEvent(
    key: "PoolAdded"
  ): TypedContractEvent<
    PoolAddedEvent.InputTuple,
    PoolAddedEvent.OutputTuple,
    PoolAddedEvent.OutputObject
  >;
  getEvent(
    key: "RewardForwarded"
  ): TypedContractEvent<
    RewardForwardedEvent.InputTuple,
    RewardForwardedEvent.OutputTuple,
    RewardForwardedEvent.OutputObject
  >;

  filters: {
    "CWalletSet(address)": TypedContractEvent<
      CWalletSetEvent.InputTuple,
      CWalletSetEvent.OutputTuple,
      CWalletSetEvent.OutputObject
    >;
    CWalletSet: TypedContractEvent<
      CWalletSetEvent.InputTuple,
      CWalletSetEvent.OutputTuple,
      CWalletSetEvent.OutputObject
    >;

    "CollectiveInitialized(address,address)": TypedContractEvent<
      CollectiveInitializedEvent.InputTuple,
      CollectiveInitializedEvent.OutputTuple,
      CollectiveInitializedEvent.OutputObject
    >;
    CollectiveInitialized: TypedContractEvent<
      CollectiveInitializedEvent.InputTuple,
      CollectiveInitializedEvent.OutputTuple,
      CollectiveInitializedEvent.OutputObject
    >;

    "MemberRemoved(address)": TypedContractEvent<
      MemberRemovedEvent.InputTuple,
      MemberRemovedEvent.OutputTuple,
      MemberRemovedEvent.OutputObject
    >;
    MemberRemoved: TypedContractEvent<
      MemberRemovedEvent.InputTuple,
      MemberRemovedEvent.OutputTuple,
      MemberRemovedEvent.OutputObject
    >;

    "NewMember(address)": TypedContractEvent<
      NewMemberEvent.InputTuple,
      NewMemberEvent.OutputTuple,
      NewMemberEvent.OutputObject
    >;
    NewMember: TypedContractEvent<
      NewMemberEvent.InputTuple,
      NewMemberEvent.OutputTuple,
      NewMemberEvent.OutputObject
    >;

    "OperatorRenounced(address)": TypedContractEvent<
      OperatorRenouncedEvent.InputTuple,
      OperatorRenouncedEvent.OutputTuple,
      OperatorRenouncedEvent.OutputObject
    >;
    OperatorRenounced: TypedContractEvent<
      OperatorRenouncedEvent.InputTuple,
      OperatorRenouncedEvent.OutputTuple,
      OperatorRenouncedEvent.OutputObject
    >;

    "PoolAdded(address,address,address,address)": TypedContractEvent<
      PoolAddedEvent.InputTuple,
      PoolAddedEvent.OutputTuple,
      PoolAddedEvent.OutputObject
    >;
    PoolAdded: TypedContractEvent<
      PoolAddedEvent.InputTuple,
      PoolAddedEvent.OutputTuple,
      PoolAddedEvent.OutputObject
    >;

    "RewardForwarded(address,address,uint256,address)": TypedContractEvent<
      RewardForwardedEvent.InputTuple,
      RewardForwardedEvent.OutputTuple,
      RewardForwardedEvent.OutputObject
    >;
    RewardForwarded: TypedContractEvent<
      RewardForwardedEvent.InputTuple,
      RewardForwardedEvent.OutputTuple,
      RewardForwardedEvent.OutputObject
    >;
  };
}
