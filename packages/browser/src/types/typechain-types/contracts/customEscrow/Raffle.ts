/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface RaffleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "enterRaffle"
      | "entered"
      | "getParticipants"
      | "linkToken"
      | "participants"
      | "raffleWinner"
      | "randomResult"
      | "rawFulfillRandomWords"
      | "sendPrize"
      | "startDraw"
      | "withdrawLink"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "enterRaffle",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "entered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getParticipants",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "linkToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "participants",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "raffleWinner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "randomResult",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "sendPrize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startDraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLink",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "enterRaffle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "entered", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "linkToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "participants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raffleWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendPrize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startDraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLink",
    data: BytesLike
  ): Result;
}

export interface Raffle extends BaseContract {
  connect(runner?: ContractRunner | null): Raffle;
  waitForDeployment(): Promise<this>;

  interface: RaffleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  enterRaffle: TypedContractMethod<
    [_participants: AddressLike[]],
    [void],
    "nonpayable"
  >;

  entered: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getParticipants: TypedContractMethod<[], [string[]], "view">;

  linkToken: TypedContractMethod<[], [string], "view">;

  participants: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  raffleWinner: TypedContractMethod<[], [string], "view">;

  randomResult: TypedContractMethod<[], [bigint], "view">;

  rawFulfillRandomWords: TypedContractMethod<
    [_requestId: BigNumberish, _randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  sendPrize: TypedContractMethod<[], [void], "nonpayable">;

  startDraw: TypedContractMethod<
    [_callbackGasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawLink: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "enterRaffle"
  ): TypedContractMethod<[_participants: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "entered"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getParticipants"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "linkToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "participants"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "raffleWinner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "randomResult"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rawFulfillRandomWords"
  ): TypedContractMethod<
    [_requestId: BigNumberish, _randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendPrize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startDraw"
  ): TypedContractMethod<
    [_callbackGasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawLink"
  ): TypedContractMethod<[], [void], "nonpayable">;

  filters: {};
}
