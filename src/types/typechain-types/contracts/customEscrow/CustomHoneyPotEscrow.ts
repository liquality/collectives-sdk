/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface CustomHoneyPotEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getOperator"
      | "getRaffleWinner"
      | "getTopContributor"
      | "initialize"
      | "sendReward"
      | "setOperator"
      | "setRaffleWinner"
      | "setTopContributor"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "OperatorSet"
      | "RaffleWinnerSet"
      | "RewardReceived"
      | "RewardSent"
      | "TopContributorSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getOperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRaffleWinner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTopContributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRaffleWinner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTopContributor",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRaffleWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTopContributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRaffleWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTopContributor",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorSetEvent {
  export type InputTuple = [operator: AddressLike];
  export type OutputTuple = [operator: string];
  export interface OutputObject {
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RaffleWinnerSetEvent {
  export type InputTuple = [topContributor: AddressLike];
  export type OutputTuple = [topContributor: string];
  export interface OutputObject {
    topContributor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardReceivedEvent {
  export type InputTuple = [value: BigNumberish];
  export type OutputTuple = [value: bigint];
  export interface OutputObject {
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardSentEvent {
  export type InputTuple = [
    topContributor: AddressLike,
    topContributorReward: BigNumberish,
    reffleWinner: AddressLike,
    reffleReward: BigNumberish
  ];
  export type OutputTuple = [
    topContributor: string,
    topContributorReward: bigint,
    reffleWinner: string,
    reffleReward: bigint
  ];
  export interface OutputObject {
    topContributor: string;
    topContributorReward: bigint;
    reffleWinner: string;
    reffleReward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TopContributorSetEvent {
  export type InputTuple = [topContributor: AddressLike];
  export type OutputTuple = [topContributor: string];
  export interface OutputObject {
    topContributor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CustomHoneyPotEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): CustomHoneyPotEscrow;
  waitForDeployment(): Promise<this>;

  interface: CustomHoneyPotEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getOperator: TypedContractMethod<[], [string], "view">;

  getRaffleWinner: TypedContractMethod<[], [string], "view">;

  getTopContributor: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<[_operator: AddressLike], [void], "payable">;

  sendReward: TypedContractMethod<[], [void], "nonpayable">;

  setOperator: TypedContractMethod<
    [_operator: AddressLike],
    [void],
    "nonpayable"
  >;

  setRaffleWinner: TypedContractMethod<
    [_winner: AddressLike],
    [void],
    "nonpayable"
  >;

  setTopContributor: TypedContractMethod<
    [_topContributor: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getOperator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRaffleWinner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTopContributor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_operator: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "sendReward"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOperator"
  ): TypedContractMethod<[_operator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRaffleWinner"
  ): TypedContractMethod<[_winner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTopContributor"
  ): TypedContractMethod<[_topContributor: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OperatorSet"
  ): TypedContractEvent<
    OperatorSetEvent.InputTuple,
    OperatorSetEvent.OutputTuple,
    OperatorSetEvent.OutputObject
  >;
  getEvent(
    key: "RaffleWinnerSet"
  ): TypedContractEvent<
    RaffleWinnerSetEvent.InputTuple,
    RaffleWinnerSetEvent.OutputTuple,
    RaffleWinnerSetEvent.OutputObject
  >;
  getEvent(
    key: "RewardReceived"
  ): TypedContractEvent<
    RewardReceivedEvent.InputTuple,
    RewardReceivedEvent.OutputTuple,
    RewardReceivedEvent.OutputObject
  >;
  getEvent(
    key: "RewardSent"
  ): TypedContractEvent<
    RewardSentEvent.InputTuple,
    RewardSentEvent.OutputTuple,
    RewardSentEvent.OutputObject
  >;
  getEvent(
    key: "TopContributorSet"
  ): TypedContractEvent<
    TopContributorSetEvent.InputTuple,
    TopContributorSetEvent.OutputTuple,
    TopContributorSetEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OperatorSet(address)": TypedContractEvent<
      OperatorSetEvent.InputTuple,
      OperatorSetEvent.OutputTuple,
      OperatorSetEvent.OutputObject
    >;
    OperatorSet: TypedContractEvent<
      OperatorSetEvent.InputTuple,
      OperatorSetEvent.OutputTuple,
      OperatorSetEvent.OutputObject
    >;

    "RaffleWinnerSet(address)": TypedContractEvent<
      RaffleWinnerSetEvent.InputTuple,
      RaffleWinnerSetEvent.OutputTuple,
      RaffleWinnerSetEvent.OutputObject
    >;
    RaffleWinnerSet: TypedContractEvent<
      RaffleWinnerSetEvent.InputTuple,
      RaffleWinnerSetEvent.OutputTuple,
      RaffleWinnerSetEvent.OutputObject
    >;

    "RewardReceived(uint256)": TypedContractEvent<
      RewardReceivedEvent.InputTuple,
      RewardReceivedEvent.OutputTuple,
      RewardReceivedEvent.OutputObject
    >;
    RewardReceived: TypedContractEvent<
      RewardReceivedEvent.InputTuple,
      RewardReceivedEvent.OutputTuple,
      RewardReceivedEvent.OutputObject
    >;

    "RewardSent(address,uint256,address,uint256)": TypedContractEvent<
      RewardSentEvent.InputTuple,
      RewardSentEvent.OutputTuple,
      RewardSentEvent.OutputObject
    >;
    RewardSent: TypedContractEvent<
      RewardSentEvent.InputTuple,
      RewardSentEvent.OutputTuple,
      RewardSentEvent.OutputObject
    >;

    "TopContributorSet(address)": TypedContractEvent<
      TopContributorSetEvent.InputTuple,
      TopContributorSetEvent.OutputTuple,
      TopContributorSetEvent.OutputObject
    >;
    TopContributorSet: TypedContractEvent<
      TopContributorSetEvent.InputTuple,
      TopContributorSetEvent.OutputTuple,
      TopContributorSetEvent.OutputObject
    >;
  };
}
