/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  HoneyPotEscrow,
  HoneyPotEscrowInterface,
} from "../../../contracts/customEscrow/HoneyPotEscrow";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidInitialization",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInitializing",
    type: "error",
  },
  {
    inputs: [],
    name: "ReentrancyGuardReentrantCall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "RewardFailedToSend",
    type: "error",
  },
  {
    inputs: [],
    name: "TopContributorNotSet",
    type: "error",
  },
  {
    inputs: [],
    name: "UnAuthorizedOperator",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "version",
        type: "uint64",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "OperatorSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "RewardReceived",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "topContributor",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "rewardValue",
        type: "uint256",
      },
    ],
    name: "RewardSent",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "topContributor",
        type: "address",
      },
    ],
    name: "TopContributorSet",
    type: "event",
  },
  {
    inputs: [],
    name: "getOperator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTopContributor",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_operator",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "sendReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_operator",
        type: "address",
      },
    ],
    name: "setOperator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_topContributor",
        type: "address",
      },
    ],
    name: "setTopContributor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001f61002460201b60201c565b61018e565b600061003461012860201b60201c565b90508060000160089054906101000a900460ff161561007f576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff80168160000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16146101255767ffffffffffffffff8160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d267ffffffffffffffff60405161011c9190610173565b60405180910390a15b50565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b600067ffffffffffffffff82169050919050565b61016d81610150565b82525050565b60006020820190506101886000830184610164565b92915050565b610b408061019d6000396000f3fe6080604052600436106100595760003560e01c80631149a81a1461009c578063b3ab15fb146100b3578063bb4cbeb7146100dc578063c4d66de814610105578063cf12f26314610121578063e7f43c681461014c57610097565b36610097577f562ff1d6fee77720385c79d29bef3c90c5a796b161826766d09a972bda104a3c3460405161008d9190610877565b60405180910390a1005b600080fd5b3480156100a857600080fd5b506100b1610177565b005b3480156100bf57600080fd5b506100da60048036038101906100d591906108f5565b610360565b005b3480156100e857600080fd5b5061010360048036038101906100fe9190610960565b610447565b005b61011f600480360381019061011a91906108f5565b61054d565b005b34801561012d57600080fd5b5061013661074b565b604051610143919061099c565b60405180910390f35b34801561015857600080fd5b50610161610774565b60405161016e919061099c565b60405180910390f35b61017f61079e565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610205576040517fec76478300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600047905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682604051610251906109e8565b60006040518083038185875af1925050503d806000811461028e576040519150601f19603f3d011682016040523d82523d6000602084013e610293565b606091505b50509050806102fb5760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826040517f576b8cd80000000000000000000000000000000000000000000000000000000081526004016102f2929190610a5c565b60405180910390fd5b7f6177f4110771217c72937d51f3a73915f2c714a6b98507e17eea7a186136a24a60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360405161034c929190610a5c565b60405180910390a1505061035e6107f5565b565b610368610774565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103cc576040517fdde8f4d900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f99d737e0adf2c449d71890b86772885ec7959b152ddb265f76325b6e68e105d38160405161043c919061099c565b60405180910390a150565b61044f610774565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104b3576040517fdde8f4d900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb21318aa7ec34aab0959496e57933756a720d035e671895e32df0308d416074460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516105429190610a85565b60405180910390a150565b600061055761080e565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff161480156105a55750825b9050600060018367ffffffffffffffff161480156105da575060003073ffffffffffffffffffffffffffffffffffffffff163b145b9050811580156105e8575080155b1561061f576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550831561066f5760018560000160086101000a81548160ff0219169083151502179055505b85600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f99d737e0adf2c449d71890b86772885ec7959b152ddb265f76325b6e68e105d3866040516106df919061099c565b60405180910390a183156107435760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2600160405161073a9190610aef565b60405180910390a15b505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006107a8610836565b905060028160000154036107e8576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002816000018190555050565b60006107ff610836565b90506001816000018190555050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b60007f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00905090565b6000819050919050565b6108718161085e565b82525050565b600060208201905061088c6000830184610868565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108c282610897565b9050919050565b6108d2816108b7565b81146108dd57600080fd5b50565b6000813590506108ef816108c9565b92915050565b60006020828403121561090b5761090a610892565b5b6000610919848285016108e0565b91505092915050565b600061092d82610897565b9050919050565b61093d81610922565b811461094857600080fd5b50565b60008135905061095a81610934565b92915050565b60006020828403121561097657610975610892565b5b60006109848482850161094b565b91505092915050565b610996816108b7565b82525050565b60006020820190506109b1600083018461098d565b92915050565b600081905092915050565b50565b60006109d26000836109b7565b91506109dd826109c2565b600082019050919050565b60006109f3826109c5565b9150819050919050565b6000819050919050565b6000610a22610a1d610a1884610897565b6109fd565b610897565b9050919050565b6000610a3482610a07565b9050919050565b6000610a4682610a29565b9050919050565b610a5681610a3b565b82525050565b6000604082019050610a716000830185610a4d565b610a7e6020830184610868565b9392505050565b6000602082019050610a9a6000830184610a4d565b92915050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000610ad9610ad4610acf84610aa0565b6109fd565b610aaa565b9050919050565b610ae981610abe565b82525050565b6000602082019050610b046000830184610ae0565b9291505056fea2646970667358221220b006c78b47f94f7798b36c1d244c362f349199d03844c771526177f1a056abe364736f6c63430008140033";

type HoneyPotEscrowConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HoneyPotEscrowConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class HoneyPotEscrow__factory extends ContractFactory {
  constructor(...args: HoneyPotEscrowConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      HoneyPotEscrow & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): HoneyPotEscrow__factory {
    return super.connect(runner) as HoneyPotEscrow__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HoneyPotEscrowInterface {
    return new Interface(_abi) as HoneyPotEscrowInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): HoneyPotEscrow {
    return new Contract(address, _abi, runner) as unknown as HoneyPotEscrow;
  }
}
